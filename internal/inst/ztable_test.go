// Code generated by command: avogen -bootstrap -data ../data -output ztable_test.go godatatest. DO NOT EDIT.

package inst_test

import (
	"reflect"
	"testing"

	"github.com/mmcloughlin/avo/internal/inst"
)

var raw = []inst.Instruction{inst.Instruction{Opcode: "ADCB", AliasOf: "", Summary: "Add with Carry", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADCL", AliasOf: "", Summary: "Add with Carry", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADCQ", AliasOf: "", Summary: "Add with Carry", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADCW", AliasOf: "", Summary: "Add with Carry", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADCXL", AliasOf: "", Summary: "Unsigned Integer Addition of Two Operands with Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADCXQ", AliasOf: "", Summary: "Unsigned Integer Addition of Two Operands with Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADDB", AliasOf: "", Summary: "Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADDL", AliasOf: "", Summary: "Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADDPD", AliasOf: "", Summary: "Add Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADDPS", AliasOf: "", Summary: "Add Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADDQ", AliasOf: "", Summary: "Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADDSD", AliasOf: "", Summary: "Add Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADDSS", AliasOf: "", Summary: "Add Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADDSUBPD", AliasOf: "", Summary: "Packed Double-FP Add/Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADDSUBPS", AliasOf: "", Summary: "Packed Single-FP Add/Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADDW", AliasOf: "", Summary: "Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADOXL", AliasOf: "", Summary: "Unsigned Integer Addition of Two Operands with Overflow Flag", Forms: []inst.Form{inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ADOXQ", AliasOf: "", Summary: "Unsigned Integer Addition of Two Operands with Overflow Flag", Forms: []inst.Form{inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "AESDEC", AliasOf: "", Summary: "Perform One Round of an AES Decryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "AESDECLAST", AliasOf: "", Summary: "Perform Last Round of an AES Decryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "AESENC", AliasOf: "", Summary: "Perform One Round of an AES Encryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "AESENCLAST", AliasOf: "", Summary: "Perform Last Round of an AES Encryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "AESIMC", AliasOf: "", Summary: "Perform the AES InvMixColumn Transformation", Forms: []inst.Form{inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "AESKEYGENASSIST", AliasOf: "", Summary: "AES Round Key Generation Assist", Forms: []inst.Form{inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ANDB", AliasOf: "", Summary: "Logical AND", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ANDL", AliasOf: "", Summary: "Logical AND", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ANDNL", AliasOf: "", Summary: "Logical AND NOT", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ANDNPD", AliasOf: "", Summary: "Bitwise Logical AND NOT of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ANDNPS", AliasOf: "", Summary: "Bitwise Logical AND NOT of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ANDNQ", AliasOf: "", Summary: "Logical AND NOT", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ANDPD", AliasOf: "", Summary: "Bitwise Logical AND of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ANDPS", AliasOf: "", Summary: "Bitwise Logical AND of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ANDQ", AliasOf: "", Summary: "Logical AND", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ANDW", AliasOf: "", Summary: "Logical AND", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BEXTRL", AliasOf: "", Summary: "Bit Field Extract", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BEXTRQ", AliasOf: "", Summary: "Bit Field Extract", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BLENDPD", AliasOf: "", Summary: "Blend Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BLENDPS", AliasOf: "", Summary: " Blend Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BLENDVPD", AliasOf: "", Summary: " Variable Blend Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BLENDVPS", AliasOf: "", Summary: " Variable Blend Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BLSIL", AliasOf: "", Summary: "Isolate Lowest Set Bit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BLSIQ", AliasOf: "", Summary: "Isolate Lowest Set Bit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BLSMSKL", AliasOf: "", Summary: "Mask From Lowest Set Bit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BLSMSKQ", AliasOf: "", Summary: "Mask From Lowest Set Bit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BLSRL", AliasOf: "", Summary: "Reset Lowest Set Bit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BLSRQ", AliasOf: "", Summary: "Reset Lowest Set Bit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BSFL", AliasOf: "", Summary: "Bit Scan Forward", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BSFQ", AliasOf: "", Summary: "Bit Scan Forward", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BSFW", AliasOf: "", Summary: "Bit Scan Forward", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BSRL", AliasOf: "", Summary: "Bit Scan Reverse", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BSRQ", AliasOf: "", Summary: "Bit Scan Reverse", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BSRW", AliasOf: "", Summary: "Bit Scan Reverse", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BSWAPL", AliasOf: "", Summary: "Byte Swap", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BSWAPQ", AliasOf: "", Summary: "Byte Swap", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BTCL", AliasOf: "", Summary: "Bit Test and Complement", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BTCQ", AliasOf: "", Summary: "Bit Test and Complement", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BTCW", AliasOf: "", Summary: "Bit Test and Complement", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BTL", AliasOf: "", Summary: "Bit Test", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BTQ", AliasOf: "", Summary: "Bit Test", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BTRL", AliasOf: "", Summary: "Bit Test and Reset", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BTRQ", AliasOf: "", Summary: "Bit Test and Reset", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BTRW", AliasOf: "", Summary: "Bit Test and Reset", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BTSL", AliasOf: "", Summary: "Bit Test and Set", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BTSQ", AliasOf: "", Summary: "Bit Test and Set", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BTSW", AliasOf: "", Summary: "Bit Test and Set", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BTW", AliasOf: "", Summary: "Bit Test", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BZHIL", AliasOf: "", Summary: "Zero High Bits Starting with Specified Bit Position", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "BZHIQ", AliasOf: "", Summary: "Zero High Bits Starting with Specified Bit Position", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CALL", AliasOf: "", Summary: "Call Procedure", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CBW", AliasOf: "", Summary: "Convert Byte to Word", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x2}, inst.ImplicitOperand{Register: "al", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "CDQ", AliasOf: "", Summary: "Convert Doubleword to Quadword", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "CDQE", AliasOf: "", Summary: "Convert Doubleword to Quadword", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "rax", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "CLC", AliasOf: "", Summary: "Clear Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CLD", AliasOf: "", Summary: "Clear Direction Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CLFLUSH", AliasOf: "", Summary: "Flush Cache Line", Forms: []inst.Form{inst.Form{ISA: []string{"CLFLUSH"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CLFLUSHOPT", AliasOf: "", Summary: "Flush Cache Line Optimized", Forms: []inst.Form{inst.Form{ISA: []string{"CLFLUSHOPT"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMC", AliasOf: "", Summary: "Complement Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLCC", AliasOf: "", Summary: "Move if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLCS", AliasOf: "", Summary: "Move if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLEQ", AliasOf: "", Summary: "Move if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLGE", AliasOf: "", Summary: "Move if greater or equal (SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLGT", AliasOf: "", Summary: "Move if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLHI", AliasOf: "", Summary: "Move if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLLE", AliasOf: "", Summary: "Move if less or equal (ZF == 1 or SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLLS", AliasOf: "", Summary: "Move if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLLT", AliasOf: "", Summary: "Move if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLMI", AliasOf: "", Summary: "Move if sign (SF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLNE", AliasOf: "", Summary: "Move if not equal (ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLOC", AliasOf: "", Summary: "Move if not overflow (OF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLOS", AliasOf: "", Summary: "Move if overflow (OF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLPC", AliasOf: "", Summary: "Move if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLPL", AliasOf: "", Summary: "Move if not sign (SF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVLPS", AliasOf: "", Summary: "Move if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQCC", AliasOf: "", Summary: "Move if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQCS", AliasOf: "", Summary: "Move if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQEQ", AliasOf: "", Summary: "Move if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQGE", AliasOf: "", Summary: "Move if greater or equal (SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQGT", AliasOf: "", Summary: "Move if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQHI", AliasOf: "", Summary: "Move if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQLE", AliasOf: "", Summary: "Move if less or equal (ZF == 1 or SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQLS", AliasOf: "", Summary: "Move if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQLT", AliasOf: "", Summary: "Move if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQMI", AliasOf: "", Summary: "Move if sign (SF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQNE", AliasOf: "", Summary: "Move if not equal (ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQOC", AliasOf: "", Summary: "Move if not overflow (OF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQOS", AliasOf: "", Summary: "Move if overflow (OF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQPC", AliasOf: "", Summary: "Move if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQPL", AliasOf: "", Summary: "Move if not sign (SF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVQPS", AliasOf: "", Summary: "Move if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWCC", AliasOf: "", Summary: "Move if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWCS", AliasOf: "", Summary: "Move if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWEQ", AliasOf: "", Summary: "Move if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWGE", AliasOf: "", Summary: "Move if greater or equal (SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWGT", AliasOf: "", Summary: "Move if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWHI", AliasOf: "", Summary: "Move if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWLE", AliasOf: "", Summary: "Move if less or equal (ZF == 1 or SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWLS", AliasOf: "", Summary: "Move if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWLT", AliasOf: "", Summary: "Move if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWMI", AliasOf: "", Summary: "Move if sign (SF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWNE", AliasOf: "", Summary: "Move if not equal (ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWOC", AliasOf: "", Summary: "Move if not overflow (OF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWOS", AliasOf: "", Summary: "Move if overflow (OF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWPC", AliasOf: "", Summary: "Move if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWPL", AliasOf: "", Summary: "Move if not sign (SF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMOVWPS", AliasOf: "", Summary: "Move if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPB", AliasOf: "", Summary: "Compare Two Operands", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "al", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPL", AliasOf: "", Summary: "Compare Two Operands", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "eax", Action: 0x1}, inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPPD", AliasOf: "", Summary: "Compare Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPPS", AliasOf: "", Summary: "Compare Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPQ", AliasOf: "", Summary: "Compare Two Operands", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rax", Action: 0x1}, inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPSD", AliasOf: "", Summary: "Compare Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPSS", AliasOf: "", Summary: "Compare Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPW", AliasOf: "", Summary: "Compare Two Operands", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "ax", Action: 0x1}, inst.Operand{Type: "imm16", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "imm16", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "imm16", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPXCHG16B", AliasOf: "", Summary: "Compare and Exchange 16 Bytes", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rbx", Action: 0x1}, inst.ImplicitOperand{Register: "rcx", Action: 0x1}, inst.ImplicitOperand{Register: "rdx", Action: 0x3}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPXCHG8B", AliasOf: "", Summary: "Compare and Exchange 8 Bytes", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "ebx", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x3}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPXCHGB", AliasOf: "", Summary: "Compare and Exchange", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPXCHGL", AliasOf: "", Summary: "Compare and Exchange", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPXCHGQ", AliasOf: "", Summary: "Compare and Exchange", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CMPXCHGW", AliasOf: "", Summary: "Compare and Exchange", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "COMISD", AliasOf: "", Summary: "Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "COMISS", AliasOf: "", Summary: "Compare Scalar Ordered Single-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CPUID", AliasOf: "", Summary: "CPU Identification", Forms: []inst.Form{inst.Form{ISA: []string{"CPUID"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "ebx", Action: 0x2}, inst.ImplicitOperand{Register: "ecx", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "CQO", AliasOf: "", Summary: "Convert Quadword to Octaword", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x1}, inst.ImplicitOperand{Register: "rdx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "CRC32B", AliasOf: "", Summary: "Accumulate CRC32 Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CRC32L", AliasOf: "", Summary: "Accumulate CRC32 Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CRC32Q", AliasOf: "", Summary: "Accumulate CRC32 Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CRC32W", AliasOf: "", Summary: "Accumulate CRC32 Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTPD2PL", AliasOf: "", Summary: "Convert Packed Double-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTPD2PS", AliasOf: "", Summary: "Convert Packed Double-Precision FP Values to Packed Single-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTPL2PD", AliasOf: "", Summary: "Convert Packed Dword Integers to Packed Double-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTPL2PS", AliasOf: "", Summary: "Convert Packed Dword Integers to Packed Single-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTPS2PD", AliasOf: "", Summary: "Convert Packed Single-Precision FP Values to Packed Double-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTPS2PL", AliasOf: "", Summary: "Convert Packed Single-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTSD2SL", AliasOf: "", Summary: "Convert Scalar Double-Precision FP Value to Integer", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTSD2SS", AliasOf: "", Summary: "Convert Scalar Double-Precision FP Value to Scalar Single-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTSL2SD", AliasOf: "", Summary: "Convert Dword Integer to Scalar Double-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTSL2SS", AliasOf: "", Summary: "Convert Dword Integer to Scalar Single-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTSQ2SD", AliasOf: "", Summary: "Convert Dword Integer to Scalar Double-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTSQ2SS", AliasOf: "", Summary: "Convert Dword Integer to Scalar Single-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTSS2SD", AliasOf: "", Summary: "Convert Scalar Single-Precision FP Value to Scalar Double-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTSS2SL", AliasOf: "", Summary: "Convert Scalar Single-Precision FP Value to Dword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTTPD2PL", AliasOf: "", Summary: "Convert with Truncation Packed Double-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTTPS2PL", AliasOf: "", Summary: "Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTTSD2SL", AliasOf: "", Summary: "Convert with Truncation Scalar Double-Precision FP Value to Signed Integer", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTTSD2SQ", AliasOf: "", Summary: "Convert with Truncation Scalar Double-Precision FP Value to Signed Integer", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CVTTSS2SL", AliasOf: "", Summary: "Convert with Truncation Scalar Single-Precision FP Value to Dword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "CWD", AliasOf: "", Summary: "Convert Word to Doubleword", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x1}, inst.ImplicitOperand{Register: "dx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "CWDE", AliasOf: "", Summary: "Convert Word to Doubleword", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x1}, inst.ImplicitOperand{Register: "eax", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "DECB", AliasOf: "", Summary: "Decrement by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "DECL", AliasOf: "", Summary: "Decrement by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "DECQ", AliasOf: "", Summary: "Decrement by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "DECW", AliasOf: "", Summary: "Decrement by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "DIVB", AliasOf: "", Summary: "Unsigned Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "DIVL", AliasOf: "", Summary: "Unsigned Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x3}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x3}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "DIVPD", AliasOf: "", Summary: "Divide Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "DIVPS", AliasOf: "", Summary: "Divide Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "DIVQ", AliasOf: "", Summary: "Unsigned Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x3}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x3}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "DIVSD", AliasOf: "", Summary: "Divide Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "DIVSS", AliasOf: "", Summary: "Divide Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "DIVW", AliasOf: "", Summary: "Unsigned Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x3}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x3}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "DPPD", AliasOf: "", Summary: "Dot Product of Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "DPPS", AliasOf: "", Summary: "Dot Product of Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "EXTRACTPS", AliasOf: "", Summary: "Extract Packed Single Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm2u", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm2u", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "HADDPD", AliasOf: "", Summary: "Packed Double-FP Horizontal Add", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "HADDPS", AliasOf: "", Summary: "Packed Single-FP Horizontal Add", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "HSUBPD", AliasOf: "", Summary: "Packed Double-FP Horizontal Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "HSUBPS", AliasOf: "", Summary: "Packed Single-FP Horizontal Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "IDIVB", AliasOf: "", Summary: "Signed Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "IDIVL", AliasOf: "", Summary: "Signed Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x3}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x3}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "IDIVQ", AliasOf: "", Summary: "Signed Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x3}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x3}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "IDIVW", AliasOf: "", Summary: "Signed Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x3}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x3}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "IMUL3L", AliasOf: "", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "IMUL3Q", AliasOf: "", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "IMUL3W", AliasOf: "", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "IMULB", AliasOf: "", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x2}, inst.ImplicitOperand{Register: "al", Action: 0x1}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x2}, inst.ImplicitOperand{Register: "al", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "IMULL", AliasOf: "", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "IMULQ", AliasOf: "", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "IMULW", AliasOf: "", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "INCB", AliasOf: "", Summary: "Increment by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "INCL", AliasOf: "", Summary: "Increment by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "INCQ", AliasOf: "", Summary: "Increment by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "INCW", AliasOf: "", Summary: "Increment by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "INSERTPS", AliasOf: "", Summary: "Insert Packed Single Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "INT", AliasOf: "", Summary: "Call to Interrupt Procedure", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "3", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JA", AliasOf: "JHI", Summary: "Jump if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JAE", AliasOf: "JCC", Summary: "Jump if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JB", AliasOf: "JCS", Summary: "Jump if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JBE", AliasOf: "JLS", Summary: "Jump if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JC", AliasOf: "JCS", Summary: "Jump if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JCC", AliasOf: "", Summary: "Jump if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JCS", AliasOf: "", Summary: "Jump if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JCXZL", AliasOf: "", Summary: "Jump if ECX register is 0", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ecx", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "JCXZQ", AliasOf: "", Summary: "Jump if RCX register is 0", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rcx", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "JE", AliasOf: "JEQ", Summary: "Jump if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JEQ", AliasOf: "", Summary: "Jump if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JG", AliasOf: "JGT", Summary: "Jump if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JGE", AliasOf: "", Summary: "Jump if greater or equal (SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JGT", AliasOf: "", Summary: "Jump if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JHI", AliasOf: "", Summary: "Jump if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JHS", AliasOf: "JCC", Summary: "Jump if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JL", AliasOf: "JLT", Summary: "Jump if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JLE", AliasOf: "", Summary: "Jump if less or equal (ZF == 1 or SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JLO", AliasOf: "JCS", Summary: "Jump if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JLS", AliasOf: "", Summary: "Jump if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JLT", AliasOf: "", Summary: "Jump if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JMI", AliasOf: "", Summary: "Jump if sign (SF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JMP", AliasOf: "", Summary: "Jump Unconditionally", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNA", AliasOf: "JLS", Summary: "Jump if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNAE", AliasOf: "JCS", Summary: "Jump if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNB", AliasOf: "JCC", Summary: "Jump if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNBE", AliasOf: "JHI", Summary: "Jump if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNC", AliasOf: "JCC", Summary: "Jump if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNE", AliasOf: "", Summary: "Jump if not equal (ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNG", AliasOf: "JLE", Summary: "Jump if less or equal (ZF == 1 or SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNGE", AliasOf: "JLT", Summary: "Jump if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNL", AliasOf: "JGE", Summary: "Jump if greater or equal (SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNLE", AliasOf: "JGT", Summary: "Jump if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNO", AliasOf: "JOC", Summary: "Jump if not overflow (OF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNP", AliasOf: "JPC", Summary: "Jump if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNS", AliasOf: "JPL", Summary: "Jump if not sign (SF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JNZ", AliasOf: "JNE", Summary: "Jump if not equal (ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JO", AliasOf: "JOS", Summary: "Jump if overflow (OF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JOC", AliasOf: "", Summary: "Jump if not overflow (OF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JOS", AliasOf: "", Summary: "Jump if overflow (OF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JP", AliasOf: "JPS", Summary: "Jump if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JPC", AliasOf: "", Summary: "Jump if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JPE", AliasOf: "JPS", Summary: "Jump if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JPL", AliasOf: "", Summary: "Jump if not sign (SF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JPO", AliasOf: "JPC", Summary: "Jump if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JPS", AliasOf: "", Summary: "Jump if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JS", AliasOf: "JMI", Summary: "Jump if sign (SF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "JZ", AliasOf: "JEQ", Summary: "Jump if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "LDDQU", AliasOf: "", Summary: "Load Unaligned Integer 128 Bits", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "LDMXCSR", AliasOf: "", Summary: "Load MXCSR Register", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "LEAL", AliasOf: "", Summary: "Load Effective Address", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "LEAQ", AliasOf: "", Summary: "Load Effective Address", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "LEAW", AliasOf: "", Summary: "Load Effective Address", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "LFENCE", AliasOf: "", Summary: "Load Fence", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "LZCNTL", AliasOf: "", Summary: "Count the Number of Leading Zero Bits", Forms: []inst.Form{inst.Form{ISA: []string{"LZCNT"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"LZCNT"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "LZCNTQ", AliasOf: "", Summary: "Count the Number of Leading Zero Bits", Forms: []inst.Form{inst.Form{ISA: []string{"LZCNT"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"LZCNT"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "LZCNTW", AliasOf: "", Summary: "Count the Number of Leading Zero Bits", Forms: []inst.Form{inst.Form{ISA: []string{"LZCNT"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"LZCNT"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MASKMOVDQU", AliasOf: "MASKMOVOU", Summary: "Store Selected Bytes of Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rdi", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "MASKMOVOU", AliasOf: "", Summary: "Store Selected Bytes of Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rdi", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "MAXPD", AliasOf: "", Summary: "Return Maximum Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MAXPS", AliasOf: "", Summary: "Return Maximum Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MAXSD", AliasOf: "", Summary: "Return Maximum Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MAXSS", AliasOf: "", Summary: "Return Maximum Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MFENCE", AliasOf: "", Summary: "Memory Fence", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MINPD", AliasOf: "", Summary: "Return Minimum Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MINPS", AliasOf: "", Summary: "Return Minimum Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MINSD", AliasOf: "", Summary: "Return Minimum Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MINSS", AliasOf: "", Summary: "Return Minimum Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MONITOR", AliasOf: "", Summary: "Monitor a Linear Address Range", Forms: []inst.Form{inst.Form{ISA: []string{"MONITOR"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVAPD", AliasOf: "", Summary: "Move Aligned Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVAPS", AliasOf: "", Summary: "Move Aligned Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVB", AliasOf: "", Summary: "Move", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVBELL", AliasOf: "", Summary: "Move Data After Swapping Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"MOVBE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"MOVBE"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVBEQQ", AliasOf: "", Summary: "Move Data After Swapping Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"MOVBE"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"MOVBE"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVBEWW", AliasOf: "", Summary: "Move Data After Swapping Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"MOVBE"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"MOVBE"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVBLSX", AliasOf: "", Summary: "Move with Sign-Extension", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVBLZX", AliasOf: "", Summary: "Move with Zero-Extend", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVBQSX", AliasOf: "", Summary: "Move with Sign-Extension", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVBQZX", AliasOf: "", Summary: "Move with Zero-Extend", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVBWSX", AliasOf: "", Summary: "Move with Sign-Extension", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVBWZX", AliasOf: "", Summary: "Move with Zero-Extend", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVD", AliasOf: "MOVQ", Summary: "Move", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm64", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVDDUP", AliasOf: "", Summary: "Move One Double-FP and Duplicate", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVDQ2Q", AliasOf: "MOVQ", Summary: "Move", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm64", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVHLPS", AliasOf: "", Summary: "Move Packed Single-Precision Floating-Point Values High to Low", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVHPD", AliasOf: "", Summary: "Move High Packed Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVHPS", AliasOf: "", Summary: "Move High Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVL", AliasOf: "", Summary: "Move", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVLHPS", AliasOf: "", Summary: "Move Packed Single-Precision Floating-Point Values Low to High", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVLPD", AliasOf: "", Summary: "Move Low Packed Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVLPS", AliasOf: "", Summary: "Move Low Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVLQSX", AliasOf: "", Summary: "Move Doubleword to Quadword with Sign-Extension", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVLQZX", AliasOf: "", Summary: "Move with Zero-Extend", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVMSKPD", AliasOf: "", Summary: "Extract Packed Double-Precision Floating-Point Sign Mask", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVMSKPS", AliasOf: "", Summary: "Extract Packed Single-Precision Floating-Point Sign Mask", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVNTDQ", AliasOf: "MOVNTO", Summary: "Store Double Quadword Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVNTDQA", AliasOf: "", Summary: "Load Double Quadword Non-Temporal Aligned Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVNTIL", AliasOf: "", Summary: "Store Doubleword Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVNTIQ", AliasOf: "", Summary: "Store Doubleword Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVNTO", AliasOf: "", Summary: "Store Double Quadword Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVNTPD", AliasOf: "", Summary: "Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVNTPS", AliasOf: "", Summary: "Store Packed Single-Precision Floating-Point Values Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVO", AliasOf: "", Summary: "Move Aligned Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVOA", AliasOf: "MOVO", Summary: "Move Aligned Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVOU", AliasOf: "", Summary: "Move Unaligned Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVQ", AliasOf: "", Summary: "Move", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm64", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVSD", AliasOf: "", Summary: "Move Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVSHDUP", AliasOf: "", Summary: "Move Packed Single-FP High and Duplicate", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVSLDUP", AliasOf: "", Summary: "Move Packed Single-FP Low and Duplicate", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVSS", AliasOf: "", Summary: "Move Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVUPD", AliasOf: "", Summary: "Move Unaligned Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVUPS", AliasOf: "", Summary: "Move Unaligned Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVW", AliasOf: "", Summary: "Move", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVWLSX", AliasOf: "", Summary: "Move with Sign-Extension", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVWLZX", AliasOf: "", Summary: "Move with Zero-Extend", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVWQSX", AliasOf: "", Summary: "Move with Sign-Extension", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MOVWQZX", AliasOf: "", Summary: "Move with Zero-Extend", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MPSADBW", AliasOf: "", Summary: "Compute Multiple Packed Sums of Absolute Difference", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MULB", AliasOf: "", Summary: "Unsigned Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x2}, inst.ImplicitOperand{Register: "al", Action: 0x1}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x2}, inst.ImplicitOperand{Register: "al", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "MULL", AliasOf: "", Summary: "Unsigned Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "MULPD", AliasOf: "", Summary: "Multiply Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MULPS", AliasOf: "", Summary: "Multiply Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MULQ", AliasOf: "", Summary: "Unsigned Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "MULSD", AliasOf: "", Summary: "Multiply Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MULSS", AliasOf: "", Summary: "Multiply Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "MULW", AliasOf: "", Summary: "Unsigned Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "MULXL", AliasOf: "", Summary: "Unsigned Multiply Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "edx", Action: 0x1}}, CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "edx", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "MULXQ", AliasOf: "", Summary: "Unsigned Multiply Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rdx", Action: 0x1}}, CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rdx", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "MWAIT", AliasOf: "", Summary: "Monitor Wait", Forms: []inst.Form{inst.Form{ISA: []string{"MONITOR"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "NEGB", AliasOf: "", Summary: "Two's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "NEGL", AliasOf: "", Summary: "Two's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "NEGQ", AliasOf: "", Summary: "Two's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "NEGW", AliasOf: "", Summary: "Two's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "NOP", AliasOf: "", Summary: "No Operation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "NOTB", AliasOf: "", Summary: "One's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "NOTL", AliasOf: "", Summary: "One's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "NOTQ", AliasOf: "", Summary: "One's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "NOTW", AliasOf: "", Summary: "One's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ORB", AliasOf: "", Summary: "Logical Inclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ORL", AliasOf: "", Summary: "Logical Inclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ORPD", AliasOf: "", Summary: "Bitwise Logical OR of Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ORPS", AliasOf: "", Summary: "Bitwise Logical OR of Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ORQ", AliasOf: "", Summary: "Logical Inclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ORW", AliasOf: "", Summary: "Logical Inclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PABSB", AliasOf: "", Summary: "Packed Absolute Value of Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PABSD", AliasOf: "", Summary: "Packed Absolute Value of Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PABSW", AliasOf: "", Summary: "Packed Absolute Value of Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PACKSSLW", AliasOf: "", Summary: "Pack Doublewords into Words with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PACKSSWB", AliasOf: "", Summary: "Pack Words into Bytes with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PACKUSDW", AliasOf: "", Summary: "Pack Doublewords into Words with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PACKUSWB", AliasOf: "", Summary: "Pack Words into Bytes with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PADDB", AliasOf: "", Summary: "Add Packed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PADDD", AliasOf: "PADDL", Summary: "Add Packed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PADDL", AliasOf: "", Summary: "Add Packed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PADDQ", AliasOf: "", Summary: "Add Packed Quadword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PADDSB", AliasOf: "", Summary: "Add Packed Signed Byte Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PADDSW", AliasOf: "", Summary: "Add Packed Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PADDUSB", AliasOf: "", Summary: "Add Packed Unsigned Byte Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PADDUSW", AliasOf: "", Summary: "Add Packed Unsigned Word Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PADDW", AliasOf: "", Summary: "Add Packed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PALIGNR", AliasOf: "", Summary: "Packed Align Right", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PAND", AliasOf: "", Summary: "Packed Bitwise Logical AND", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PANDN", AliasOf: "", Summary: "Packed Bitwise Logical AND NOT", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PAUSE", AliasOf: "", Summary: "Spin Loop Hint", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PAVGB", AliasOf: "", Summary: "Average Packed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PAVGW", AliasOf: "", Summary: "Average Packed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PBLENDVB", AliasOf: "", Summary: "Variable Blend Packed Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PBLENDW", AliasOf: "", Summary: "Blend Packed Words", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PCLMULQDQ", AliasOf: "", Summary: "Carry-Less Quadword Multiplication", Forms: []inst.Form{inst.Form{ISA: []string{"PCLMULQDQ"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"PCLMULQDQ"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PCMPEQB", AliasOf: "", Summary: "Compare Packed Byte Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PCMPEQL", AliasOf: "", Summary: "Compare Packed Doubleword Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PCMPEQQ", AliasOf: "", Summary: "Compare Packed Quadword Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PCMPEQW", AliasOf: "", Summary: "Compare Packed Word Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PCMPESTRI", AliasOf: "", Summary: "Packed Compare Explicit Length Strings, Return Index", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x2}, inst.ImplicitOperand{Register: "edx", Action: 0x1}}, CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x2}, inst.ImplicitOperand{Register: "edx", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "PCMPESTRM", AliasOf: "", Summary: "Packed Compare Explicit Length Strings, Return Mask", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x1}, inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x1}, inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "PCMPGTB", AliasOf: "", Summary: "Compare Packed Signed Byte Integers for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PCMPGTL", AliasOf: "", Summary: "Compare Packed Signed Doubleword Integers for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PCMPGTQ", AliasOf: "", Summary: "Compare Packed Data for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PCMPGTW", AliasOf: "", Summary: "Compare Packed Signed Word Integers for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PCMPISTRI", AliasOf: "", Summary: "Packed Compare Implicit Length Strings, Return Index", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ecx", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ecx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "PCMPISTRM", AliasOf: "", Summary: "Packed Compare Implicit Length Strings, Return Mask", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "PDEPL", AliasOf: "", Summary: "Parallel Bits Deposit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PDEPQ", AliasOf: "", Summary: "Parallel Bits Deposit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PEXTL", AliasOf: "", Summary: "Parallel Bits Extract", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PEXTQ", AliasOf: "", Summary: "Parallel Bits Extract", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PEXTRB", AliasOf: "", Summary: "Extract Byte", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PEXTRD", AliasOf: "", Summary: "Extract Doubleword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PEXTRQ", AliasOf: "", Summary: "Extract Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PEXTRW", AliasOf: "", Summary: "Extract Word", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PHADDD", AliasOf: "", Summary: "Packed Horizontal Add Doubleword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PHADDSW", AliasOf: "", Summary: "Packed Horizontal Add Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PHADDW", AliasOf: "", Summary: "Packed Horizontal Add Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PHMINPOSUW", AliasOf: "", Summary: "Packed Horizontal Minimum of Unsigned Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PHSUBD", AliasOf: "", Summary: "Packed Horizontal Subtract Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PHSUBSW", AliasOf: "", Summary: "Packed Horizontal Subtract Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PHSUBW", AliasOf: "", Summary: "Packed Horizontal Subtract Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PINSRB", AliasOf: "", Summary: "Insert Byte", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PINSRD", AliasOf: "", Summary: "Insert Doubleword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PINSRQ", AliasOf: "", Summary: "Insert Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PINSRW", AliasOf: "", Summary: "Insert Word", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMADDUBSW", AliasOf: "", Summary: "Multiply and Add Packed Signed and Unsigned Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMADDWL", AliasOf: "", Summary: "Multiply and Add Packed Signed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMAXSB", AliasOf: "", Summary: "Maximum of Packed Signed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMAXSD", AliasOf: "", Summary: "Maximum of Packed Signed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMAXSW", AliasOf: "", Summary: "Maximum of Packed Signed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMAXUB", AliasOf: "", Summary: "Maximum of Packed Unsigned Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMAXUD", AliasOf: "", Summary: "Maximum of Packed Unsigned Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMAXUW", AliasOf: "", Summary: "Maximum of Packed Unsigned Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMINSB", AliasOf: "", Summary: "Minimum of Packed Signed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMINSD", AliasOf: "", Summary: "Minimum of Packed Signed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMINSW", AliasOf: "", Summary: "Minimum of Packed Signed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMINUB", AliasOf: "", Summary: "Minimum of Packed Unsigned Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMINUD", AliasOf: "", Summary: "Minimum of Packed Unsigned Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMINUW", AliasOf: "", Summary: "Minimum of Packed Unsigned Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVMSKB", AliasOf: "", Summary: "Move Byte Mask", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVSXBD", AliasOf: "", Summary: "Move Packed Byte Integers to Doubleword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVSXBQ", AliasOf: "", Summary: "Move Packed Byte Integers to Quadword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVSXBW", AliasOf: "", Summary: "Move Packed Byte Integers to Word Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVSXDQ", AliasOf: "", Summary: "Move Packed Doubleword Integers to Quadword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVSXWD", AliasOf: "", Summary: "Move Packed Word Integers to Doubleword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVSXWQ", AliasOf: "", Summary: "Move Packed Word Integers to Quadword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVZXBD", AliasOf: "", Summary: "Move Packed Byte Integers to Doubleword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVZXBQ", AliasOf: "", Summary: "Move Packed Byte Integers to Quadword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVZXBW", AliasOf: "", Summary: "Move Packed Byte Integers to Word Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVZXDQ", AliasOf: "", Summary: "Move Packed Doubleword Integers to Quadword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVZXWD", AliasOf: "", Summary: "Move Packed Word Integers to Doubleword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMOVZXWQ", AliasOf: "", Summary: "Move Packed Word Integers to Quadword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMULDQ", AliasOf: "", Summary: "Multiply Packed Signed Doubleword Integers and Store Quadword Result", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMULHRSW", AliasOf: "", Summary: "Packed Multiply Signed Word Integers and Store High Result with Round and Scale", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMULHUW", AliasOf: "", Summary: "Multiply Packed Unsigned Word Integers and Store High Result", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMULHW", AliasOf: "", Summary: "Multiply Packed Signed Word Integers and Store High Result", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMULLD", AliasOf: "", Summary: "Multiply Packed Signed Doubleword Integers and Store Low Result", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMULLW", AliasOf: "", Summary: "Multiply Packed Signed Word Integers and Store Low Result", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PMULULQ", AliasOf: "", Summary: "Multiply Packed Unsigned Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "POPCNTL", AliasOf: "", Summary: "Count of Number of Bits Set to 1", Forms: []inst.Form{inst.Form{ISA: []string{"POPCNT"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"POPCNT"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "POPCNTQ", AliasOf: "", Summary: "Count of Number of Bits Set to 1", Forms: []inst.Form{inst.Form{ISA: []string{"POPCNT"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"POPCNT"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "POPCNTW", AliasOf: "", Summary: "Count of Number of Bits Set to 1", Forms: []inst.Form{inst.Form{ISA: []string{"POPCNT"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"POPCNT"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "POPQ", AliasOf: "", Summary: "Pop a Value from the Stack", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "POPW", AliasOf: "", Summary: "Pop a Value from the Stack", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "POR", AliasOf: "", Summary: "Packed Bitwise Logical OR", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PREFETCHNTA", AliasOf: "", Summary: "Prefetch Data Into Caches using NTA Hint", Forms: []inst.Form{inst.Form{ISA: []string{"MMX+"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PREFETCHT0", AliasOf: "", Summary: "Prefetch Data Into Caches using T0 Hint", Forms: []inst.Form{inst.Form{ISA: []string{"MMX+"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PREFETCHT1", AliasOf: "", Summary: "Prefetch Data Into Caches using T1 Hint", Forms: []inst.Form{inst.Form{ISA: []string{"MMX+"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PREFETCHT2", AliasOf: "", Summary: "Prefetch Data Into Caches using T2 Hint", Forms: []inst.Form{inst.Form{ISA: []string{"MMX+"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSADBW", AliasOf: "", Summary: "Compute Sum of Absolute Differences", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSHUFB", AliasOf: "", Summary: "Packed Shuffle Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSHUFD", AliasOf: "PSHUFL", Summary: "Shuffle Packed Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSHUFHW", AliasOf: "", Summary: "Shuffle Packed High Words", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSHUFL", AliasOf: "", Summary: "Shuffle Packed Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSHUFLW", AliasOf: "", Summary: "Shuffle Packed Low Words", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSIGNB", AliasOf: "", Summary: "Packed Sign of Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSIGND", AliasOf: "", Summary: "Packed Sign of Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSIGNW", AliasOf: "", Summary: "Packed Sign of Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSLLDQ", AliasOf: "PSLLO", Summary: "Shift Packed Double Quadword Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSLLL", AliasOf: "", Summary: "Shift Packed Doubleword Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSLLO", AliasOf: "", Summary: "Shift Packed Double Quadword Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSLLQ", AliasOf: "", Summary: "Shift Packed Quadword Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSLLW", AliasOf: "", Summary: "Shift Packed Word Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSRAL", AliasOf: "", Summary: "Shift Packed Doubleword Data Right Arithmetic", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSRAW", AliasOf: "", Summary: "Shift Packed Word Data Right Arithmetic", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSRLDQ", AliasOf: "PSRLO", Summary: "Shift Packed Double Quadword Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSRLL", AliasOf: "", Summary: "Shift Packed Doubleword Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSRLO", AliasOf: "", Summary: "Shift Packed Double Quadword Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSRLQ", AliasOf: "", Summary: "Shift Packed Quadword Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSRLW", AliasOf: "", Summary: "Shift Packed Word Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSUBB", AliasOf: "", Summary: "Subtract Packed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSUBL", AliasOf: "", Summary: "Subtract Packed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSUBQ", AliasOf: "", Summary: "Subtract Packed Quadword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSUBSB", AliasOf: "", Summary: "Subtract Packed Signed Byte Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSUBSW", AliasOf: "", Summary: "Subtract Packed Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSUBUSB", AliasOf: "", Summary: "Subtract Packed Unsigned Byte Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSUBUSW", AliasOf: "", Summary: "Subtract Packed Unsigned Word Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PSUBW", AliasOf: "", Summary: "Subtract Packed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PTEST", AliasOf: "", Summary: "Packed Logical Compare", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PUNPCKHBW", AliasOf: "", Summary: "Unpack and Interleave High-Order Bytes into Words", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PUNPCKHLQ", AliasOf: "", Summary: "Unpack and Interleave High-Order Doublewords into Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PUNPCKHQDQ", AliasOf: "", Summary: "Unpack and Interleave High-Order Quadwords into Double Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PUNPCKHWL", AliasOf: "", Summary: "Unpack and Interleave High-Order Words into Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PUNPCKLBW", AliasOf: "", Summary: "Unpack and Interleave Low-Order Bytes into Words", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PUNPCKLLQ", AliasOf: "", Summary: "Unpack and Interleave Low-Order Doublewords into Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PUNPCKLQDQ", AliasOf: "", Summary: "Unpack and Interleave Low-Order Quadwords into Double Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PUNPCKLWL", AliasOf: "", Summary: "Unpack and Interleave Low-Order Words into Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PUSHQ", AliasOf: "", Summary: "Push Value Onto the Stack", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PUSHW", AliasOf: "", Summary: "Push Value Onto the Stack", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "PXOR", AliasOf: "", Summary: "Packed Bitwise Logical Exclusive OR", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RCLB", AliasOf: "", Summary: "Rotate Left through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RCLL", AliasOf: "", Summary: "Rotate Left through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RCLQ", AliasOf: "", Summary: "Rotate Left through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RCLW", AliasOf: "", Summary: "Rotate Left through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RCPPS", AliasOf: "", Summary: "Compute Approximate Reciprocals of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RCPSS", AliasOf: "", Summary: "Compute Approximate Reciprocal of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RCRB", AliasOf: "", Summary: "Rotate Right through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RCRL", AliasOf: "", Summary: "Rotate Right through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RCRQ", AliasOf: "", Summary: "Rotate Right through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RCRW", AliasOf: "", Summary: "Rotate Right through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RDRANDL", AliasOf: "", Summary: "Read Random Number", Forms: []inst.Form{inst.Form{ISA: []string{"RDRAND"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RDRANDQ", AliasOf: "", Summary: "Read Random Number", Forms: []inst.Form{inst.Form{ISA: []string{"RDRAND"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RDRANDW", AliasOf: "", Summary: "Read Random Number", Forms: []inst.Form{inst.Form{ISA: []string{"RDRAND"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RDSEEDL", AliasOf: "", Summary: "Read Random SEED", Forms: []inst.Form{inst.Form{ISA: []string{"RDSEED"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RDSEEDQ", AliasOf: "", Summary: "Read Random SEED", Forms: []inst.Form{inst.Form{ISA: []string{"RDSEED"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RDSEEDW", AliasOf: "", Summary: "Read Random SEED", Forms: []inst.Form{inst.Form{ISA: []string{"RDSEED"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RDTSC", AliasOf: "", Summary: "Read Time-Stamp Counter", Forms: []inst.Form{inst.Form{ISA: []string{"RDTSC"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x2}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "RDTSCP", AliasOf: "", Summary: "Read Time-Stamp Counter and Processor ID", Forms: []inst.Form{inst.Form{ISA: []string{"RDTSCP"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x2}, inst.ImplicitOperand{Register: "ecx", Action: 0x2}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "RET", AliasOf: "", Summary: "Return from Procedure", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RETFL", AliasOf: "", Summary: "Return from Procedure", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RETFQ", AliasOf: "", Summary: "Return from Procedure", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RETFW", AliasOf: "", Summary: "Return from Procedure", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ROLB", AliasOf: "", Summary: "Rotate Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ROLL", AliasOf: "", Summary: "Rotate Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ROLQ", AliasOf: "", Summary: "Rotate Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ROLW", AliasOf: "", Summary: "Rotate Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RORB", AliasOf: "", Summary: "Rotate Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RORL", AliasOf: "", Summary: "Rotate Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RORQ", AliasOf: "", Summary: "Rotate Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RORW", AliasOf: "", Summary: "Rotate Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RORXL", AliasOf: "", Summary: "Rotate Right Logical Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RORXQ", AliasOf: "", Summary: "Rotate Right Logical Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ROUNDPD", AliasOf: "", Summary: "Round Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ROUNDPS", AliasOf: "", Summary: "Round Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ROUNDSD", AliasOf: "", Summary: "Round Scalar Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "ROUNDSS", AliasOf: "", Summary: "Round Scalar Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RSQRTPS", AliasOf: "", Summary: "Compute Reciprocals of Square Roots of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "RSQRTSS", AliasOf: "", Summary: "Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SALB", AliasOf: "", Summary: "Arithmetic Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SALL", AliasOf: "", Summary: "Arithmetic Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SALQ", AliasOf: "", Summary: "Arithmetic Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SALW", AliasOf: "", Summary: "Arithmetic Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SARB", AliasOf: "", Summary: "Arithmetic Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SARL", AliasOf: "", Summary: "Arithmetic Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SARQ", AliasOf: "", Summary: "Arithmetic Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SARW", AliasOf: "", Summary: "Arithmetic Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SARXL", AliasOf: "", Summary: "Arithmetic Shift Right Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SARXQ", AliasOf: "", Summary: "Arithmetic Shift Right Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SBBB", AliasOf: "", Summary: "Subtract with Borrow", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SBBL", AliasOf: "", Summary: "Subtract with Borrow", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SBBQ", AliasOf: "", Summary: "Subtract with Borrow", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SBBW", AliasOf: "", Summary: "Subtract with Borrow", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETCC", AliasOf: "", Summary: "Set byte if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETCS", AliasOf: "", Summary: "Set byte if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETEQ", AliasOf: "", Summary: "Set byte if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETGE", AliasOf: "", Summary: "Set byte if greater or equal (SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETGT", AliasOf: "", Summary: "Set byte if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETHI", AliasOf: "", Summary: "Set byte if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETLE", AliasOf: "", Summary: "Set byte if less or equal (ZF == 1 or SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETLS", AliasOf: "", Summary: "Set byte if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETLT", AliasOf: "", Summary: "Set byte if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETMI", AliasOf: "", Summary: "Set byte if sign (SF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETNE", AliasOf: "", Summary: "Set byte if not equal (ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETOC", AliasOf: "", Summary: "Set byte if not overflow (OF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETOS", AliasOf: "", Summary: "Set byte if overflow (OF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETPC", AliasOf: "", Summary: "Set byte if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETPL", AliasOf: "", Summary: "Set byte if not sign (SF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SETPS", AliasOf: "", Summary: "Set byte if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SFENCE", AliasOf: "", Summary: "Store Fence", Forms: []inst.Form{inst.Form{ISA: []string{"MMX+"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHA1MSG1", AliasOf: "", Summary: "Perform an Intermediate Calculation for the Next Four SHA1 Message Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHA1MSG2", AliasOf: "", Summary: "Perform a Final Calculation for the Next Four SHA1 Message Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHA1NEXTE", AliasOf: "", Summary: "Calculate SHA1 State Variable E after Four Rounds", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHA1RNDS4", AliasOf: "", Summary: "Perform Four Rounds of SHA1 Operation", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "imm2u", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "imm2u", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHA256MSG1", AliasOf: "", Summary: "Perform an Intermediate Calculation for the Next Four SHA256 Message Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHA256MSG2", AliasOf: "", Summary: "Perform a Final Calculation for the Next Four SHA256 Message Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHA256RNDS2", AliasOf: "", Summary: "Perform Two Rounds of SHA256 Operation", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHLB", AliasOf: "", Summary: "Logical Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHLL", AliasOf: "", Summary: "Logical Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHLQ", AliasOf: "", Summary: "Logical Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHLW", AliasOf: "", Summary: "Logical Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHLXL", AliasOf: "", Summary: "Logical Shift Left Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHLXQ", AliasOf: "", Summary: "Logical Shift Left Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHRB", AliasOf: "", Summary: "Logical Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHRL", AliasOf: "", Summary: "Logical Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHRQ", AliasOf: "", Summary: "Logical Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHRW", AliasOf: "", Summary: "Logical Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHRXL", AliasOf: "", Summary: "Logical Shift Right Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHRXQ", AliasOf: "", Summary: "Logical Shift Right Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHUFPD", AliasOf: "", Summary: "Shuffle Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SHUFPS", AliasOf: "", Summary: "Shuffle Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SQRTPD", AliasOf: "", Summary: "Compute Square Roots of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SQRTPS", AliasOf: "", Summary: "Compute Square Roots of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SQRTSD", AliasOf: "", Summary: "Compute Square Root of Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SQRTSS", AliasOf: "", Summary: "Compute Square Root of Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "STC", AliasOf: "", Summary: "Set Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "STD", AliasOf: "", Summary: "Set Direction Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "STMXCSR", AliasOf: "", Summary: "Store MXCSR Register State", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SUBB", AliasOf: "", Summary: "Subtract", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SUBL", AliasOf: "", Summary: "Subtract", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SUBPD", AliasOf: "", Summary: "Subtract Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SUBPS", AliasOf: "", Summary: "Subtract Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SUBQ", AliasOf: "", Summary: "Subtract", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SUBSD", AliasOf: "", Summary: "Subtract Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SUBSS", AliasOf: "", Summary: "Subtract Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SUBW", AliasOf: "", Summary: "Subtract", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "SYSCALL", AliasOf: "", Summary: "Fast System Call", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "r11", Action: 0x2}, inst.ImplicitOperand{Register: "rcx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "TESTB", AliasOf: "", Summary: "Logical Compare", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "TESTL", AliasOf: "", Summary: "Logical Compare", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "TESTQ", AliasOf: "", Summary: "Logical Compare", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "TESTW", AliasOf: "", Summary: "Logical Compare", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "TZCNTL", AliasOf: "", Summary: "Count the Number of Trailing Zero Bits", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "TZCNTQ", AliasOf: "", Summary: "Count the Number of Trailing Zero Bits", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "TZCNTW", AliasOf: "", Summary: "Count the Number of Trailing Zero Bits", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "UCOMISD", AliasOf: "", Summary: "Unordered Compare Scalar Double-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "UCOMISS", AliasOf: "", Summary: "Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "UD2", AliasOf: "", Summary: "Undefined Instruction", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "UNPCKHPD", AliasOf: "", Summary: "Unpack and Interleave High Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "UNPCKHPS", AliasOf: "", Summary: "Unpack and Interleave High Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "UNPCKLPD", AliasOf: "", Summary: "Unpack and Interleave Low Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "UNPCKLPS", AliasOf: "", Summary: "Unpack and Interleave Low Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VADDPD", AliasOf: "", Summary: "Add Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VADDPS", AliasOf: "", Summary: "Add Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VADDSD", AliasOf: "", Summary: "Add Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VADDSS", AliasOf: "", Summary: "Add Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VADDSUBPD", AliasOf: "", Summary: "Packed Double-FP Add/Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VADDSUBPS", AliasOf: "", Summary: "Packed Single-FP Add/Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VAESDEC", AliasOf: "", Summary: "Perform One Round of an AES Decryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VAESDECLAST", AliasOf: "", Summary: "Perform Last Round of an AES Decryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VAESENC", AliasOf: "", Summary: "Perform One Round of an AES Encryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VAESENCLAST", AliasOf: "", Summary: "Perform Last Round of an AES Encryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VAESIMC", AliasOf: "", Summary: "Perform the AES InvMixColumn Transformation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VAESKEYGENASSIST", AliasOf: "", Summary: "AES Round Key Generation Assist", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VANDNPD", AliasOf: "", Summary: "Bitwise Logical AND NOT of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VANDNPS", AliasOf: "", Summary: "Bitwise Logical AND NOT of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VANDPD", AliasOf: "", Summary: "Bitwise Logical AND of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VANDPS", AliasOf: "", Summary: "Bitwise Logical AND of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VBLENDPD", AliasOf: "", Summary: "Blend Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VBLENDPS", AliasOf: "", Summary: " Blend Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VBLENDVPD", AliasOf: "", Summary: " Variable Blend Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VBLENDVPS", AliasOf: "", Summary: " Variable Blend Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VBROADCASTF128", AliasOf: "", Summary: "Broadcast 128 Bit of Floating-Point Data", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VBROADCASTI128", AliasOf: "", Summary: "Broadcast 128 Bits of Integer Data", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VBROADCASTSD", AliasOf: "", Summary: "Broadcast Double-Precision Floating-Point Element", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VBROADCASTSS", AliasOf: "", Summary: "Broadcast Single-Precision Floating-Point Element", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCMPPD", AliasOf: "", Summary: "Compare Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCMPPS", AliasOf: "", Summary: "Compare Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCMPSD", AliasOf: "", Summary: "Compare Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCMPSS", AliasOf: "", Summary: "Compare Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCOMISD", AliasOf: "", Summary: "Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCOMISS", AliasOf: "", Summary: "Compare Scalar Ordered Single-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTDQ2PD", AliasOf: "", Summary: "Convert Packed Dword Integers to Packed Double-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTDQ2PS", AliasOf: "", Summary: "Convert Packed Dword Integers to Packed Single-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTPD2DQX", AliasOf: "", Summary: "Convert Packed Double-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTPD2DQY", AliasOf: "", Summary: "Convert Packed Double-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTPD2PSX", AliasOf: "", Summary: "Convert Packed Double-Precision FP Values to Packed Single-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTPD2PSY", AliasOf: "", Summary: "Convert Packed Double-Precision FP Values to Packed Single-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTPH2PS", AliasOf: "", Summary: "Convert Half-Precision FP Values to Single-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTPS2DQ", AliasOf: "", Summary: "Convert Packed Single-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTPS2PD", AliasOf: "", Summary: "Convert Packed Single-Precision FP Values to Packed Double-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTPS2PH", AliasOf: "", Summary: "Convert Single-Precision FP value to Half-Precision FP value", Forms: []inst.Form{inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTSD2SI", AliasOf: "", Summary: "Convert Scalar Double-Precision FP Value to Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTSD2SIQ", AliasOf: "", Summary: "Convert Scalar Double-Precision FP Value to Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTSD2SS", AliasOf: "", Summary: "Convert Scalar Double-Precision FP Value to Scalar Single-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTSI2SDL", AliasOf: "", Summary: "Convert Dword Integer to Scalar Double-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTSI2SDQ", AliasOf: "", Summary: "Convert Dword Integer to Scalar Double-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTSI2SSL", AliasOf: "", Summary: "Convert Dword Integer to Scalar Single-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTSI2SSQ", AliasOf: "", Summary: "Convert Dword Integer to Scalar Single-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTSS2SD", AliasOf: "", Summary: "Convert Scalar Single-Precision FP Value to Scalar Double-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTSS2SI", AliasOf: "", Summary: "Convert Scalar Single-Precision FP Value to Dword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTSS2SIQ", AliasOf: "", Summary: "Convert Scalar Single-Precision FP Value to Dword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTTPD2DQX", AliasOf: "", Summary: "Convert with Truncation Packed Double-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTTPD2DQY", AliasOf: "", Summary: "Convert with Truncation Packed Double-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTTPS2DQ", AliasOf: "", Summary: "Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTTSD2SI", AliasOf: "", Summary: "Convert with Truncation Scalar Double-Precision FP Value to Signed Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTTSD2SIQ", AliasOf: "", Summary: "Convert with Truncation Scalar Double-Precision FP Value to Signed Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTTSS2SI", AliasOf: "", Summary: "Convert with Truncation Scalar Single-Precision FP Value to Dword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VCVTTSS2SIQ", AliasOf: "", Summary: "Convert with Truncation Scalar Single-Precision FP Value to Dword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VDIVPD", AliasOf: "", Summary: "Divide Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VDIVPS", AliasOf: "", Summary: "Divide Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VDIVSD", AliasOf: "", Summary: "Divide Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VDIVSS", AliasOf: "", Summary: "Divide Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VDPPD", AliasOf: "", Summary: "Dot Product of Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VDPPS", AliasOf: "", Summary: "Dot Product of Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VEXTRACTF128", AliasOf: "", Summary: "Extract Packed Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VEXTRACTI128", AliasOf: "", Summary: "Extract Packed Integer Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VEXTRACTPS", AliasOf: "", Summary: "Extract Packed Single Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADD132PD", AliasOf: "", Summary: "Fused Multiply-Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADD132PS", AliasOf: "", Summary: "Fused Multiply-Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADD132SD", AliasOf: "", Summary: "Fused Multiply-Add of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADD132SS", AliasOf: "", Summary: "Fused Multiply-Add of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADD213PD", AliasOf: "", Summary: "Fused Multiply-Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADD213PS", AliasOf: "", Summary: "Fused Multiply-Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADD213SD", AliasOf: "", Summary: "Fused Multiply-Add of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADD213SS", AliasOf: "", Summary: "Fused Multiply-Add of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADD231PD", AliasOf: "", Summary: "Fused Multiply-Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADD231PS", AliasOf: "", Summary: "Fused Multiply-Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADD231SD", AliasOf: "", Summary: "Fused Multiply-Add of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADD231SS", AliasOf: "", Summary: "Fused Multiply-Add of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADDSUB132PD", AliasOf: "", Summary: "Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADDSUB132PS", AliasOf: "", Summary: "Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADDSUB213PD", AliasOf: "", Summary: "Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADDSUB213PS", AliasOf: "", Summary: "Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADDSUB231PD", AliasOf: "", Summary: "Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMADDSUB231PS", AliasOf: "", Summary: "Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUB132PD", AliasOf: "", Summary: "Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUB132PS", AliasOf: "", Summary: "Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUB132SD", AliasOf: "", Summary: "Fused Multiply-Subtract of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUB132SS", AliasOf: "", Summary: "Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUB213PD", AliasOf: "", Summary: "Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUB213PS", AliasOf: "", Summary: "Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUB213SD", AliasOf: "", Summary: "Fused Multiply-Subtract of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUB213SS", AliasOf: "", Summary: "Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUB231PD", AliasOf: "", Summary: "Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUB231PS", AliasOf: "", Summary: "Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUB231SD", AliasOf: "", Summary: "Fused Multiply-Subtract of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUB231SS", AliasOf: "", Summary: "Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUBADD132PD", AliasOf: "", Summary: "Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUBADD132PS", AliasOf: "", Summary: "Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUBADD213PD", AliasOf: "", Summary: "Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUBADD213PS", AliasOf: "", Summary: "Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUBADD231PD", AliasOf: "", Summary: "Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFMSUBADD231PS", AliasOf: "", Summary: "Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMADD132PD", AliasOf: "", Summary: "Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMADD132PS", AliasOf: "", Summary: "Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMADD132SD", AliasOf: "", Summary: "Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMADD132SS", AliasOf: "", Summary: "Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMADD213PD", AliasOf: "", Summary: "Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMADD213PS", AliasOf: "", Summary: "Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMADD213SD", AliasOf: "", Summary: "Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMADD213SS", AliasOf: "", Summary: "Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMADD231PD", AliasOf: "", Summary: "Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMADD231PS", AliasOf: "", Summary: "Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMADD231SD", AliasOf: "", Summary: "Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMADD231SS", AliasOf: "", Summary: "Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMSUB132PD", AliasOf: "", Summary: "Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMSUB132PS", AliasOf: "", Summary: "Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMSUB132SD", AliasOf: "", Summary: "Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMSUB132SS", AliasOf: "", Summary: "Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMSUB213PD", AliasOf: "", Summary: "Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMSUB213PS", AliasOf: "", Summary: "Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMSUB213SD", AliasOf: "", Summary: "Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMSUB213SS", AliasOf: "", Summary: "Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMSUB231PD", AliasOf: "", Summary: "Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMSUB231PS", AliasOf: "", Summary: "Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMSUB231SD", AliasOf: "", Summary: "Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VFNMSUB231SS", AliasOf: "", Summary: "Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VGATHERDPD", AliasOf: "", Summary: "Gather Packed Double-Precision Floating-Point Values Using Signed Doubleword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm32x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x3}, inst.Operand{Type: "vm32x", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VGATHERDPS", AliasOf: "", Summary: "Gather Packed Single-Precision Floating-Point Values Using Signed Doubleword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm32x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x3}, inst.Operand{Type: "vm32y", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VGATHERQPD", AliasOf: "", Summary: "Gather Packed Double-Precision Floating-Point Values Using Signed Quadword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm64x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x3}, inst.Operand{Type: "vm64y", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VGATHERQPS", AliasOf: "", Summary: "Gather Packed Single-Precision Floating-Point Values Using Signed Quadword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm64x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm64y", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VHADDPD", AliasOf: "", Summary: "Packed Double-FP Horizontal Add", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VHADDPS", AliasOf: "", Summary: "Packed Single-FP Horizontal Add", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VHSUBPD", AliasOf: "", Summary: "Packed Double-FP Horizontal Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VHSUBPS", AliasOf: "", Summary: "Packed Single-FP Horizontal Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VINSERTF128", AliasOf: "", Summary: "Insert Packed Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VINSERTI128", AliasOf: "", Summary: "Insert Packed Integer Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VINSERTPS", AliasOf: "", Summary: "Insert Packed Single Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VLDDQU", AliasOf: "", Summary: "Load Unaligned Integer 128 Bits", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VLDMXCSR", AliasOf: "", Summary: "Load MXCSR Register", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMASKMOVDQU", AliasOf: "", Summary: "Store Selected Bytes of Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rdi", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "VMASKMOVPD", AliasOf: "", Summary: "Conditional Move Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMASKMOVPS", AliasOf: "", Summary: "Conditional Move Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMAXPD", AliasOf: "", Summary: "Return Maximum Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMAXPS", AliasOf: "", Summary: "Return Maximum Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMAXSD", AliasOf: "", Summary: "Return Maximum Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMAXSS", AliasOf: "", Summary: "Return Maximum Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMINPD", AliasOf: "", Summary: "Return Minimum Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMINPS", AliasOf: "", Summary: "Return Minimum Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMINSD", AliasOf: "", Summary: "Return Minimum Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMINSS", AliasOf: "", Summary: "Return Minimum Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVAPD", AliasOf: "", Summary: "Move Aligned Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVAPS", AliasOf: "", Summary: "Move Aligned Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVD", AliasOf: "", Summary: "Move Doubleword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVDDUP", AliasOf: "", Summary: "Move One Double-FP and Duplicate", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVDQA", AliasOf: "", Summary: "Move Aligned Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVDQU", AliasOf: "", Summary: "Move Unaligned Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVHLPS", AliasOf: "", Summary: "Move Packed Single-Precision Floating-Point Values High to Low", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVHPD", AliasOf: "", Summary: "Move High Packed Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVHPS", AliasOf: "", Summary: "Move High Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVLHPS", AliasOf: "", Summary: "Move Packed Single-Precision Floating-Point Values Low to High", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVLPD", AliasOf: "", Summary: "Move Low Packed Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVLPS", AliasOf: "", Summary: "Move Low Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVMSKPD", AliasOf: "", Summary: "Extract Packed Double-Precision Floating-Point Sign Mask", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVMSKPS", AliasOf: "", Summary: "Extract Packed Single-Precision Floating-Point Sign Mask", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVNTDQ", AliasOf: "", Summary: "Store Double Quadword Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVNTDQA", AliasOf: "", Summary: "Load Double Quadword Non-Temporal Aligned Hint", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVNTPD", AliasOf: "", Summary: "Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVNTPS", AliasOf: "", Summary: "Store Packed Single-Precision Floating-Point Values Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVQ", AliasOf: "", Summary: "Move Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVSD", AliasOf: "", Summary: "Move Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVSHDUP", AliasOf: "", Summary: "Move Packed Single-FP High and Duplicate", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVSLDUP", AliasOf: "", Summary: "Move Packed Single-FP Low and Duplicate", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVSS", AliasOf: "", Summary: "Move Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVUPD", AliasOf: "", Summary: "Move Unaligned Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMOVUPS", AliasOf: "", Summary: "Move Unaligned Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMPSADBW", AliasOf: "", Summary: "Compute Multiple Packed Sums of Absolute Difference", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMULPD", AliasOf: "", Summary: "Multiply Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMULPS", AliasOf: "", Summary: "Multiply Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMULSD", AliasOf: "", Summary: "Multiply Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VMULSS", AliasOf: "", Summary: "Multiply Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VORPD", AliasOf: "", Summary: "Bitwise Logical OR of Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VORPS", AliasOf: "", Summary: "Bitwise Logical OR of Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPABSB", AliasOf: "", Summary: "Packed Absolute Value of Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPABSD", AliasOf: "", Summary: "Packed Absolute Value of Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPABSW", AliasOf: "", Summary: "Packed Absolute Value of Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPACKSSDW", AliasOf: "", Summary: "Pack Doublewords into Words with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPACKSSWB", AliasOf: "", Summary: "Pack Words into Bytes with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPACKUSDW", AliasOf: "", Summary: "Pack Doublewords into Words with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPACKUSWB", AliasOf: "", Summary: "Pack Words into Bytes with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPADDB", AliasOf: "", Summary: "Add Packed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPADDD", AliasOf: "", Summary: "Add Packed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPADDQ", AliasOf: "", Summary: "Add Packed Quadword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPADDSB", AliasOf: "", Summary: "Add Packed Signed Byte Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPADDSW", AliasOf: "", Summary: "Add Packed Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPADDUSB", AliasOf: "", Summary: "Add Packed Unsigned Byte Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPADDUSW", AliasOf: "", Summary: "Add Packed Unsigned Word Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPADDW", AliasOf: "", Summary: "Add Packed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPALIGNR", AliasOf: "", Summary: "Packed Align Right", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPAND", AliasOf: "", Summary: "Packed Bitwise Logical AND", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPANDN", AliasOf: "", Summary: "Packed Bitwise Logical AND NOT", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPAVGB", AliasOf: "", Summary: "Average Packed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPAVGW", AliasOf: "", Summary: "Average Packed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPBLENDD", AliasOf: "", Summary: "Blend Packed Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPBLENDVB", AliasOf: "", Summary: "Variable Blend Packed Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPBLENDW", AliasOf: "", Summary: "Blend Packed Words", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPBROADCASTB", AliasOf: "", Summary: "Broadcast Byte Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPBROADCASTD", AliasOf: "", Summary: "Broadcast Doubleword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPBROADCASTQ", AliasOf: "", Summary: "Broadcast Quadword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPBROADCASTW", AliasOf: "", Summary: "Broadcast Word Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCLMULQDQ", AliasOf: "", Summary: "Carry-Less Quadword Multiplication", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "PCLMULQDQ"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX", "PCLMULQDQ"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCMPEQB", AliasOf: "", Summary: "Compare Packed Byte Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCMPEQD", AliasOf: "", Summary: "Compare Packed Doubleword Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCMPEQQ", AliasOf: "", Summary: "Compare Packed Quadword Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCMPEQW", AliasOf: "", Summary: "Compare Packed Word Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCMPESTRI", AliasOf: "", Summary: "Packed Compare Explicit Length Strings, Return Index", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x2}, inst.ImplicitOperand{Register: "edx", Action: 0x1}}, CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x2}, inst.ImplicitOperand{Register: "edx", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCMPESTRM", AliasOf: "", Summary: "Packed Compare Explicit Length Strings, Return Mask", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x1}, inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x1}, inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCMPGTB", AliasOf: "", Summary: "Compare Packed Signed Byte Integers for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCMPGTD", AliasOf: "", Summary: "Compare Packed Signed Doubleword Integers for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCMPGTQ", AliasOf: "", Summary: "Compare Packed Data for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCMPGTW", AliasOf: "", Summary: "Compare Packed Signed Word Integers for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCMPISTRI", AliasOf: "", Summary: "Packed Compare Implicit Length Strings, Return Index", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ecx", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ecx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "VPCMPISTRM", AliasOf: "", Summary: "Packed Compare Implicit Length Strings, Return Mask", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}, CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "VPERM2F128", AliasOf: "", Summary: "Permute Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPERM2I128", AliasOf: "", Summary: "Permute 128-Bit Integer Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPERMD", AliasOf: "", Summary: "Permute Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPERMILPD", AliasOf: "", Summary: "Permute Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPERMILPS", AliasOf: "", Summary: "Permute Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPERMPD", AliasOf: "", Summary: "Permute Double-Precision Floating-Point Elements", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPERMPS", AliasOf: "", Summary: "Permute Single-Precision Floating-Point Elements", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPERMQ", AliasOf: "", Summary: "Permute Quadword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPEXTRB", AliasOf: "", Summary: "Extract Byte", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPEXTRD", AliasOf: "", Summary: "Extract Doubleword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPEXTRQ", AliasOf: "", Summary: "Extract Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPEXTRW", AliasOf: "", Summary: "Extract Word", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPGATHERDD", AliasOf: "", Summary: "Gather Packed Doubleword Values Using Signed Doubleword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm32x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x3}, inst.Operand{Type: "vm32y", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPGATHERDQ", AliasOf: "", Summary: "Gather Packed Quadword Values Using Signed Doubleword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm32x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x3}, inst.Operand{Type: "vm32x", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPGATHERQD", AliasOf: "", Summary: "Gather Packed Doubleword Values Using Signed Quadword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm64x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm64y", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPGATHERQQ", AliasOf: "", Summary: "Gather Packed Quadword Values Using Signed Quadword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm64x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x3}, inst.Operand{Type: "vm64y", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPHADDD", AliasOf: "", Summary: "Packed Horizontal Add Doubleword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPHADDSW", AliasOf: "", Summary: "Packed Horizontal Add Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPHADDW", AliasOf: "", Summary: "Packed Horizontal Add Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPHMINPOSUW", AliasOf: "", Summary: "Packed Horizontal Minimum of Unsigned Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPHSUBD", AliasOf: "", Summary: "Packed Horizontal Subtract Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPHSUBSW", AliasOf: "", Summary: "Packed Horizontal Subtract Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPHSUBW", AliasOf: "", Summary: "Packed Horizontal Subtract Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPINSRB", AliasOf: "", Summary: "Insert Byte", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPINSRD", AliasOf: "", Summary: "Insert Doubleword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPINSRQ", AliasOf: "", Summary: "Insert Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPINSRW", AliasOf: "", Summary: "Insert Word", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMADDUBSW", AliasOf: "", Summary: "Multiply and Add Packed Signed and Unsigned Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMADDWD", AliasOf: "", Summary: "Multiply and Add Packed Signed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMASKMOVD", AliasOf: "", Summary: "Conditional Move Packed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMASKMOVQ", AliasOf: "", Summary: "Conditional Move Packed Quadword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMAXSB", AliasOf: "", Summary: "Maximum of Packed Signed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMAXSD", AliasOf: "", Summary: "Maximum of Packed Signed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMAXSW", AliasOf: "", Summary: "Maximum of Packed Signed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMAXUB", AliasOf: "", Summary: "Maximum of Packed Unsigned Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMAXUD", AliasOf: "", Summary: "Maximum of Packed Unsigned Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMAXUW", AliasOf: "", Summary: "Maximum of Packed Unsigned Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMINSB", AliasOf: "", Summary: "Minimum of Packed Signed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMINSD", AliasOf: "", Summary: "Minimum of Packed Signed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMINSW", AliasOf: "", Summary: "Minimum of Packed Signed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMINUB", AliasOf: "", Summary: "Minimum of Packed Unsigned Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMINUD", AliasOf: "", Summary: "Minimum of Packed Unsigned Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMINUW", AliasOf: "", Summary: "Minimum of Packed Unsigned Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVMSKB", AliasOf: "", Summary: "Move Byte Mask", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVSXBD", AliasOf: "", Summary: "Move Packed Byte Integers to Doubleword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVSXBQ", AliasOf: "", Summary: "Move Packed Byte Integers to Quadword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVSXBW", AliasOf: "", Summary: "Move Packed Byte Integers to Word Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVSXDQ", AliasOf: "", Summary: "Move Packed Doubleword Integers to Quadword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVSXWD", AliasOf: "", Summary: "Move Packed Word Integers to Doubleword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVSXWQ", AliasOf: "", Summary: "Move Packed Word Integers to Quadword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVZXBD", AliasOf: "", Summary: "Move Packed Byte Integers to Doubleword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVZXBQ", AliasOf: "", Summary: "Move Packed Byte Integers to Quadword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVZXBW", AliasOf: "", Summary: "Move Packed Byte Integers to Word Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVZXDQ", AliasOf: "", Summary: "Move Packed Doubleword Integers to Quadword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVZXWD", AliasOf: "", Summary: "Move Packed Word Integers to Doubleword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMOVZXWQ", AliasOf: "", Summary: "Move Packed Word Integers to Quadword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMULDQ", AliasOf: "", Summary: "Multiply Packed Signed Doubleword Integers and Store Quadword Result", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMULHRSW", AliasOf: "", Summary: "Packed Multiply Signed Word Integers and Store High Result with Round and Scale", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMULHUW", AliasOf: "", Summary: "Multiply Packed Unsigned Word Integers and Store High Result", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMULHW", AliasOf: "", Summary: "Multiply Packed Signed Word Integers and Store High Result", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMULLD", AliasOf: "", Summary: "Multiply Packed Signed Doubleword Integers and Store Low Result", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMULLW", AliasOf: "", Summary: "Multiply Packed Signed Word Integers and Store Low Result", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPMULUDQ", AliasOf: "", Summary: "Multiply Packed Unsigned Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPOR", AliasOf: "", Summary: "Packed Bitwise Logical OR", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSADBW", AliasOf: "", Summary: "Compute Sum of Absolute Differences", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSHUFB", AliasOf: "", Summary: "Packed Shuffle Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSHUFD", AliasOf: "", Summary: "Shuffle Packed Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSHUFHW", AliasOf: "", Summary: "Shuffle Packed High Words", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSHUFLW", AliasOf: "", Summary: "Shuffle Packed Low Words", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSIGNB", AliasOf: "", Summary: "Packed Sign of Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSIGND", AliasOf: "", Summary: "Packed Sign of Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSIGNW", AliasOf: "", Summary: "Packed Sign of Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSLLD", AliasOf: "", Summary: "Shift Packed Doubleword Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSLLDQ", AliasOf: "", Summary: "Shift Packed Double Quadword Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSLLQ", AliasOf: "", Summary: "Shift Packed Quadword Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSLLVD", AliasOf: "", Summary: "Variable Shift Packed Doubleword Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSLLVQ", AliasOf: "", Summary: "Variable Shift Packed Quadword Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSLLW", AliasOf: "", Summary: "Shift Packed Word Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSRAD", AliasOf: "", Summary: "Shift Packed Doubleword Data Right Arithmetic", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSRAVD", AliasOf: "", Summary: "Variable Shift Packed Doubleword Data Right Arithmetic", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSRAW", AliasOf: "", Summary: "Shift Packed Word Data Right Arithmetic", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSRLD", AliasOf: "", Summary: "Shift Packed Doubleword Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSRLDQ", AliasOf: "", Summary: "Shift Packed Double Quadword Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSRLQ", AliasOf: "", Summary: "Shift Packed Quadword Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSRLVD", AliasOf: "", Summary: "Variable Shift Packed Doubleword Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSRLVQ", AliasOf: "", Summary: "Variable Shift Packed Quadword Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSRLW", AliasOf: "", Summary: "Shift Packed Word Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSUBB", AliasOf: "", Summary: "Subtract Packed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSUBD", AliasOf: "", Summary: "Subtract Packed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSUBQ", AliasOf: "", Summary: "Subtract Packed Quadword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSUBSB", AliasOf: "", Summary: "Subtract Packed Signed Byte Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSUBSW", AliasOf: "", Summary: "Subtract Packed Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSUBUSB", AliasOf: "", Summary: "Subtract Packed Unsigned Byte Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSUBUSW", AliasOf: "", Summary: "Subtract Packed Unsigned Word Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPSUBW", AliasOf: "", Summary: "Subtract Packed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPTEST", AliasOf: "", Summary: "Packed Logical Compare", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPUNPCKHBW", AliasOf: "", Summary: "Unpack and Interleave High-Order Bytes into Words", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPUNPCKHDQ", AliasOf: "", Summary: "Unpack and Interleave High-Order Doublewords into Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPUNPCKHQDQ", AliasOf: "", Summary: "Unpack and Interleave High-Order Quadwords into Double Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPUNPCKHWD", AliasOf: "", Summary: "Unpack and Interleave High-Order Words into Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPUNPCKLBW", AliasOf: "", Summary: "Unpack and Interleave Low-Order Bytes into Words", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPUNPCKLDQ", AliasOf: "", Summary: "Unpack and Interleave Low-Order Doublewords into Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPUNPCKLQDQ", AliasOf: "", Summary: "Unpack and Interleave Low-Order Quadwords into Double Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPUNPCKLWD", AliasOf: "", Summary: "Unpack and Interleave Low-Order Words into Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VPXOR", AliasOf: "", Summary: "Packed Bitwise Logical Exclusive OR", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VRCPPS", AliasOf: "", Summary: "Compute Approximate Reciprocals of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VRCPSS", AliasOf: "", Summary: "Compute Approximate Reciprocal of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VROUNDPD", AliasOf: "", Summary: "Round Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VROUNDPS", AliasOf: "", Summary: "Round Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VROUNDSD", AliasOf: "", Summary: "Round Scalar Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VROUNDSS", AliasOf: "", Summary: "Round Scalar Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VRSQRTPS", AliasOf: "", Summary: "Compute Reciprocals of Square Roots of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VRSQRTSS", AliasOf: "", Summary: "Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VSHUFPD", AliasOf: "", Summary: "Shuffle Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VSHUFPS", AliasOf: "", Summary: "Shuffle Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VSQRTPD", AliasOf: "", Summary: "Compute Square Roots of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VSQRTPS", AliasOf: "", Summary: "Compute Square Roots of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VSQRTSD", AliasOf: "", Summary: "Compute Square Root of Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VSQRTSS", AliasOf: "", Summary: "Compute Square Root of Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VSTMXCSR", AliasOf: "", Summary: "Store MXCSR Register State", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VSUBPD", AliasOf: "", Summary: "Subtract Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VSUBPS", AliasOf: "", Summary: "Subtract Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VSUBSD", AliasOf: "", Summary: "Subtract Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VSUBSS", AliasOf: "", Summary: "Subtract Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VTESTPD", AliasOf: "", Summary: "Packed Double-Precision Floating-Point Bit Test", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VTESTPS", AliasOf: "", Summary: "Packed Single-Precision Floating-Point Bit Test", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VUCOMISD", AliasOf: "", Summary: "Unordered Compare Scalar Double-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VUCOMISS", AliasOf: "", Summary: "Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VUNPCKHPD", AliasOf: "", Summary: "Unpack and Interleave High Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VUNPCKHPS", AliasOf: "", Summary: "Unpack and Interleave High Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VUNPCKLPD", AliasOf: "", Summary: "Unpack and Interleave Low Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VUNPCKLPS", AliasOf: "", Summary: "Unpack and Interleave Low Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VXORPD", AliasOf: "", Summary: "Bitwise Logical XOR for Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VXORPS", AliasOf: "", Summary: "Bitwise Logical XOR for Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VZEROALL", AliasOf: "", Summary: "Zero All YMM Registers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "VZEROUPPER", AliasOf: "", Summary: "Zero Upper Bits of YMM Registers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XADDB", AliasOf: "", Summary: "Exchange and Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XADDL", AliasOf: "", Summary: "Exchange and Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XADDQ", AliasOf: "", Summary: "Exchange and Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XADDW", AliasOf: "", Summary: "Exchange and Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XCHGB", AliasOf: "", Summary: "Exchange Register/Memory with Register", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x3}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XCHGL", AliasOf: "", Summary: "Exchange Register/Memory with Register", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "eax", Action: 0x3}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x3}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XCHGQ", AliasOf: "", Summary: "Exchange Register/Memory with Register", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rax", Action: 0x3}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x3}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XCHGW", AliasOf: "", Summary: "Exchange Register/Memory with Register", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "ax", Action: 0x3}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x3}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XGETBV", AliasOf: "", Summary: "Get Value of Extended Control Register", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x2}, inst.ImplicitOperand{Register: "ecx", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "XLAT", AliasOf: "", Summary: "Table Look-up Translation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "al", Action: 0x3}, inst.ImplicitOperand{Register: "ebx", Action: 0x1}}, CancellingInputs: false}}}, inst.Instruction{Opcode: "XORB", AliasOf: "", Summary: "Logical Exclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XORL", AliasOf: "", Summary: "Logical Exclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XORPD", AliasOf: "", Summary: "Bitwise Logical XOR for Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XORPS", AliasOf: "", Summary: "Bitwise Logical XOR for Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XORQ", AliasOf: "", Summary: "Logical Exclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}, inst.Instruction{Opcode: "XORW", AliasOf: "", Summary: "Logical Exclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: true}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil), CancellingInputs: false}}}}

func TestVerifyInstructionsList(t *testing.T) {
	if !reflect.DeepEqual(raw, inst.Instructions) {
		t.Fatal("bad code generation for instructions list")
	}
}
